name: Check GitHub Releases

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  check_and_update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch and Compare Release Info
        id: release_check
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }} # Use the token from secrets
        run: |
          REPOS=(
              "PedigreeAll/Pedigree-Vision-BE"
              "PedigreeAll/PedigreeVisionUI"
              "PedigreeAll/DigitreeModels"
          )

          latest_output=""
          for repo in "${REPOS[@]}"; do
              echo "Fetching release info for $repo..."
              release_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/releases/latest")

              if echo "$release_json" | jq -e '.message' > /dev/null; then
                  echo "Error fetching release for $repo: $(echo "$release_json" | jq -r .message)" >&2
                  echo "::error::Error fetching release for $repo"
                  exit 1
              fi

              release_name=$(echo "$release_json" | jq -r '.name')
              tag_name=$(echo "$release_json" | jq -r '.tag_name')

              # Standardize the release name
              release_name=${release_name#Release }

              if [[ -z "$release_name" ]] || [[ -z "$tag_name" ]]; then
                  echo "Could not extract release or tag name for $repo" >&2
                  echo "::error::Could not extract release or tag name for $repo"
                  exit 1
              fi

              # Get the commit SHA for the release tag
              ref_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/git/ref/tags/$tag_name")
              object_type=$(echo "$ref_json" | jq -r '.object.type')
              object_sha=$(echo "$ref_json" | jq -r '.object.sha')
              commit_sha=""

              if [[ "$object_type" == "commit" ]]; then
                  commit_sha=$object_sha
              elif [[ "$object_type" == "tag" ]]; then
                  tag_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/git/tags/$object_sha")
                  commit_sha=$(echo "$tag_json" | jq -r '.object.sha')
              fi

              if [[ -z "$commit_sha" || "$commit_sha" == "null" ]]; then
                  echo "Could not resolve commit SHA for tag $tag_name in $repo" >&2
                  echo "::error::Could not resolve commit SHA for tag $tag_name in $repo"
                  exit 1
              fi

              # Construct the asset URLs based on the tag
              zip_url="https://github.com/${repo}/archive/refs/tags/${tag_name}.zip"
              tar_url="https://github.com/${repo}/archive/refs/tags/${tag_name}.tar.gz"

              # Format the output for readability
              latest_output+="Repository: $repo\n"
              latest_output+="Release: $release_name\n"
              latest_output+="Tag: $tag_name\n"
              latest_output+="Commit: $commit_sha\n"
              latest_output+="Assets:\n"
              latest_output+="  - $zip_url\n"
              latest_output+="  - $tar_url\n"
              latest_output+="--------------------------------------------------\n"
          done

          echo "--- Fetched Latest Release Info ---"
          echo -e "$latest_output"

          latest_file=$(ls -v R*.txt 2>/dev/null | tail -n 1)
          changes_made="false"

          if [ -z "$latest_file" ]; then
              echo "No existing release file found. Creating R1.txt..."
              echo -e "$latest_output" > R1.txt
              changes_made="true"
          else
              echo "Comparing with latest file: $latest_file"
              temp_file=$(mktemp)
              echo -e "$latest_output" > "$temp_file"

              if diff -q "$temp_file" "$latest_file" >/dev/null; then
                  echo "No new release information found."
              else
                  echo "New release information found. Creating new file."
                  file_number=$(echo "$latest_file" | sed -e 's/R//' -e 's/.txt//')
                  next_file_number=$((file_number + 1))
                  new_file="R${next_file_number}.txt"
                  echo -e "$latest_output" > "$new_file"
                  changes_made="true"
              fi
              rm "$temp_file"
          fi
          echo "changes_made=$changes_made" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.release_check.outputs.changes_made == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add R*.txt
          git commit -m "Automated: Update R*.txt with latest release info and asset URLs"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
