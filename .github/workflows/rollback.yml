name: EC2 Deploy or Rollback (Pipeline-Driven)

on:
  workflow_dispatch:
    inputs:
      be_rollback_index:
        description: 'Pedigree-Vision-BE: 0=deploy latest, -1=skip, >0=rollback by N versions'
        required: true
        type: number
        default: 0
      ui_rollback_index:
        description: 'PedigreeVisionUI: 0=deploy latest, -1=skip, >0=rollback by N versions'
        required: true
        type: number
        default: 0
      models_rollback_index:
        description: 'DigitreeModels: 0=deploy latest, -1=skip, >0=rollback by N versions'
        required: true
        type: number
        default: 0

jobs:
  calculate_and_execute_rollback:
    name: Calculate Target Commits and Execute on EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: Install Tools
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ap-south-1

      - name: Calculate Target Commits
        id: calculate_commits
        run: |
          # This step is now correct and does not need changes.
          BUCKET_NAME="myawsbucket9660551704"
          get_commit_hash() {
            local repo_name="$1"
            local action_index="$2"
            local commit_hash=""
            if [ "$action_index" -eq -1 ]; then
              echo "INFO: Skipping ${repo_name} as index is -1." >&2
              echo "$commit_hash"
              return
            fi
            local s3_path="s3://${BUCKET_NAME}/${repo_name}/"
            echo "INFO: Listing releases for ${repo_name}..." >&2
            local sorted_files=$(aws s3 ls "$s3_path" | awk '{print $4}' | grep '\.json$' | sort -V)
            if [ -z "$sorted_files" ]; then
              echo "ERROR: No release files found for ${repo_name}." >&2
              echo "$commit_hash"
              return
            fi
            local count=$(echo "$sorted_files" | wc -l)
            local target_filename=""
            if [ "$action_index" -eq 0 ]; then
              echo "INFO: Action for ${repo_name} is DEPLOY LATEST." >&2
              target_filename=$(echo "$sorted_files" | tail -n 1)
            elif [ "$action_index" -gt 0 ]; then
              echo "INFO: Action for ${repo_name} is ROLLBACK by ${action_index}." >&2
              local target_list_index=$((count - action_index))
              if [ "$target_list_index" -le 0 ]; then
                echo "ERROR: Cannot roll back ${repo_name} by ${action_index}." >&2
                echo "$commit_hash"
                return
              fi
              target_filename=$(echo "$sorted_files" | sed -n "${target_list_index}p")
            fi
            if [ -z "$target_filename" ]; then
                echo "ERROR: Could not determine target filename for ${repo_name}." >&2
                echo "$commit_hash"
                return
            fi
            echo "INFO: Target file for ${repo_name} is ${target_filename}" >&2
            local s3_key="${repo_name}/${target_filename}"
            aws s3 cp "s3://${BUCKET_NAME}/${s3_key}" "/tmp/${target_filename}" >&2
            commit_hash=$(jq -r '.latest_release.commit_sha' "/tmp/${target_filename}")
            echo "$commit_hash"
          }
          BE_HASH=$(get_commit_hash "Pedigree-Vision-BE" ${{ github.event.inputs.be_rollback_index }})
          UI_HASH=$(get_commit_hash "PedigreeVisionUI" ${{ github.event.inputs.ui_rollback_index }})
          MODELS_HASH=$(get_commit_hash "DigitreeModels" ${{ github.event.inputs.models_rollback_index }})
          echo "be_commit_hash=$BE_HASH" >> $GITHUB_OUTPUT
          echo "ui_commit_hash=$UI_HASH" >> $GITHUB_OUTPUT
          echo "models_commit_hash=$MODELS_HASH" >> $GITHUB_OUTPUT

      - name: Execute Commands on EC2 Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            # This script block is now corrected to handle authentication.
            set -e
            PROJECTS_BASE_DIR="$HOME"
            GITHUB_ORG="PedigreeAll"
            
            # Pass the PAT from GitHub Secrets into an environment variable on the server
            export GH_PAT='${{ secrets.GH_PAT }}'

            # A reusable function to perform the authenticated git operations
            perform_git_checkout() {
              local repo_name="$1"
              local commit_hash="$2"

              # Skip if the commit hash is empty (meaning we skip this repo)
              if [ -z "$commit_hash" ]; then
                return 0
              fi

              echo "=================================================="
              echo ">>> Executing on EC2 for ${repo_name}: checkout ${commit_hash:0:7}"
              cd "${PROJECTS_BASE_DIR}/${repo_name}"

              # Construct the authenticated URL for this specific repo
              local auth_url="https://x-access-token:${GH_PAT}@github.com/${GITHUB_ORG}/${repo_name}.git"
              local original_url="https://github.com/${GITHUB_ORG}/${repo_name}.git"

              echo "Temporarily setting remote URL for authentication..."
              git remote set-url origin "${auth_url}"
              
              echo "Fetching from remote..."
              git fetch --all --prune
              
              echo "Resetting remote URL for security..."
              git remote set-url origin "${original_url}"

              echo "Checking out commit..."
              git checkout "$commit_hash"

              # Add your service-specific restart command here
              # if [ "$repo_name" == "Pedigree-Vision-BE" ]; then sudo systemctl restart be.service; fi
            }

            # Call the reusable function for each repository
            perform_git_checkout "Pedigree-Vision-BE" "${{ steps.calculate_commits.outputs.be_commit_hash }}"
            perform_git_checkout "PedigreeVisionUI" "${{ steps.calculate_commits.outputs.ui_commit_hash }}"
            perform_git_checkout "DigitreeModels" "${{ steps.calculate_commits.outputs.models_commit_hash }}"

            echo "=================================================="
            echo "All EC2 operations complete."
